!VERY IMPORTANT!
#Subtitle# 
*hightlightthree*
"highlightone"
`highlighttwo`
// Comment
--- TITLE ---
-----------------------------------------------------------
------------------------------------------------------------
--> => <== <--
http://www.anyurl.com
[js][end] [html][end] [c#][end]

--- SOFTWARE NEEDED ---
NPM and NodeJS
Postman (API test app)
SQL Lite and SQL Lite Browser

--- STARTING THE PROJECT ---
Using the .NET CLI we create a new ASP .Net Core Web API, splitting the client and server side code completely
  [sh]
    dotnet new webapi -h
  [end]

#Install extension in VS Code#
  - Nuget Package Manager
  - C# (powered by OmniSharp)
  - C# Extensions
  - EasyZoom or add to use settings "editor.mouseWheelZoom": true
  - Angular Files (Alex Ivan)
  - Angular Language Service
  - Angular2-switcher
  - Auto Rename Tag
  - Braket Pair Colorizer
  - Debugger for Chrome
  - Material Icon Theme
  - Path Intellisense
  - Prettier
  - TSLint


`launchSettings.json`==> Very important file to define some of the settings of the web server
`appsettings.Development.json` ==> Cool file for custom settings for Development (also possible to add other environments)
`appsetings.json` ==> Default settings for other modes. Both files are applied, first the default, then the specific
==> Notice in development there is a cath exception handler setup in the startup:
[cs]
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
[end]

!VERY IMPORTANT! 
[sh] dotnet watch run[end] ==> It will watch files for a change, compile and refresh!

--- ENTITY FRAMEWORK ---
  dotnet ef -h
    migration: Will create tables in database based on dbsets i the DataContext.cs
  
  `dotnet ef migrations add InitialCreate`
    This create the migration file and other in the Migration folder to know the state in the db.
    It is simple to read the file, with the operations that will be created and the rollback
  `dotnet ef database update`
    It run the migrations neede

--- DATA TRANSFER OBJECT DTO ---
Use DTOs to map main models into simpler objects that are passed or displayed in the view.
Use a new DTOs folder to host this objectws

--- VALIDATION IN THE API PARAMETERS ---
  In the DTO use attributes: [Required], 
  Use or ModelSate.IsValid to validate if the model is valid. If using the decorator [ApiController], then no NEEDED

  In the input parameters, we can specify the source of the information ([FromBody], [FromQuery])
[c#]
if(!ModelSate.IsValid)
{
return BadRequest(MOdelState);
}
[end]

--- TOKEN AUTHENTICATION ---
  JSON Web Tokens (JWT)
    Header ===> {alg "HS512", typ"JWT"}
    Payload
    Secret header and payload encrypted
    Header and Payload can be decoded and read by anyone, so beware of this!
    The user authenticate in the server with username and password
    The server responds with a JWT
    The user sends this JWT for every requests that needs to be authenticated
    The server validates the JWT and sends the response

    We control what info we send in the JWT from client to server.
    We can use this container to put info about the user so the server wont have to query the database to get info about the user (username, roles, etc ...). This is called claims
  
--- SUMMARY NOTES ---
  Password should be stored hashed
  The element to hash with, salt, also in the db
  Use DTOs to shape the data sent and received
  Use repository pattern to add layer of abstraccion with the data later
  Use Auth Controller
  JWT to secure api calls and add the authentication in the startup (authentication middleware)

